AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: An AWS Lambda application that calls the Lambda API.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: "Optional parameters" }
        Parameters:
          - ProjectName
Parameters:
  ProjectName:
    Type: String
    Description: "Name of the project"
    Default: "TheOddDystrict"
Globals:
  Function:
    Layers:
      - !Ref RuntimeDependenciesLayer
    Runtime: nodejs14.x
    MemorySize: 256
    Timeout: 100
Resources:
  ReadApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: tod-leaderboard-read
      Description: "Read API for the leaderboard"
      StageName: Prod
  WriteApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: tod-leaderboard-write
      Description: "Write API for the leaderboard"
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for the Write API
          Tags:
            - Key: Project
              Value: !Sub "${ProjectName}"
  LeaderboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: .
      Handler: lib/lambda/http.handler
      Runtime: nodejs14.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BoardsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ScoresTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NodesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaderboardsTable
      Tags:
        Project: !Sub "${ProjectName}"
      Events:
        LeaderboardHttp:
          Type: Api
          Properties:
            RestApiId: !Ref ReadApi
            Method: ANY
            Path: /{proxy+}
    Metadata:
      BuildMethod: makefile
  IngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: .
      Handler: lib/lambda/ingest.httpHandler
      Runtime: nodejs14.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BoardsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ScoresTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NodesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaderboardsTable
      Tags:
        Project: !Sub "${ProjectName}"
      Events:
        IngestHttp:
          Type: Api
          Properties:
            Method: POST
            Path: /ingest
            RestApiId: !Ref WriteApi
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: makefile
  PotatoIngestion:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: .
      Handler: lib/lambda/ingest.sqsHandler
      MemorySize: 512
      Timeout: 20
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BoardsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ScoresTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NodesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaderboardsTable
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PotatoScoreQueue.Arn
      Tags:
        Project: !Sub "${ProjectName}"
    Metadata:
      BuildMethod: makefile
  PotatoScoreTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: PotatoScoreTopic
      FifoTopic: true
      TopicName: !Sub "${ProjectName}-potato-score-topic-1.fifo"
      ContentBasedDeduplication: true
      Subscription:
        - Protocol: sqs
          Endpoint: !GetAtt PotatoScoreQueue.Arn
      Tags:
        - Key: Project
          Value: !Sub "${ProjectName}"
  PotatoScoreQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ProjectName}-potato-score-queue-0.fifo"
      FifoQueue: true
      VisibilityTimeout: 40
      Tags:
        - Key: Project
          Value: !Sub "${ProjectName}"
  BoardsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: boards
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: !Sub "${ProjectName}"
  ScoresTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scores
      KeySchema:
        - AttributeName: Board_Name
          KeyType: HASH
        - AttributeName: Player_ID
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: Board_Name
          AttributeType: S
        - AttributeName: Player_ID
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: !Sub "${ProjectName}"
  NodesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: nodes
      KeySchema:
        - AttributeName: Board_Name
          KeyType: HASH
        - AttributeName: Node_ID
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: Board_Name
          AttributeType: S
        - AttributeName: Node_ID
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: !Sub "${ProjectName}"
  LeaderboardsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: leaderboards
      KeySchema:
        - AttributeName: Board_Name
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: Board_Name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: !Sub "${ProjectName}"
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain
Outputs:
  ReadApi:
    Value: !Sub "https://${ReadApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  WriteApi:
    Value: !Sub "https://${WriteApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
